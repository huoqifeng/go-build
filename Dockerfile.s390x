FROM alpine:3.11 as qemu

ARG QEMU_VERSION=6.1.0-8
ARG QEMU_ARCHS="s390x"

RUN apk --update add curl

# Enable non-native runs on amd64 architecture hosts
RUN curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${QEMU_ARCHS}-static.tar.gz | tar zxvf - -C /usr/bin &&\
    chmod +x /usr/bin/qemu-s390x-static

FROM calico/bpftool:v5.3-s390x as bpftool

FROM s390x/golang:1.17.9-buster
MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)

ARG MANIFEST_TOOL_VERSION=v1.0.2
ARG GO111MODULE=on

COPY --from=qemu /usr/bin/qemu-s390x-static /usr/bin/

# Install gcc for cgo.
# Install clang, libbpf and newer kernel headers for building BPF binaries.
RUN echo 'APT::Default-Release "buster";' > /etc/apt/apt.conf.d/99defaultrelease && \
    echo 'deb     http://ftp.am.debian.org/debian/    buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list && \
    apt-get -y update &&  \
    apt-get -y upgrade && \
    apt-get install --no-install-recommends -y -t buster-backports \
        libbpf-dev linux-headers-5.10.0-0.bpo.9-s390x && \
    apt-get install --no-install-recommends -y \
        curl bash git openssh-client mercurial make wget util-linux file grep sed jq zip \
        llvm-11 clang-11 binutils file iproute2 autoconf automake build-essential \
        ca-certificates gcc mingw-w64 libc-dev bsdmainutils strace libpcap-dev && \
    rm -rf /var/lib/apt/lists/*

# su-exec is used by the entrypoint script to execute the user's command with the right UID/GID.
# (sudo doesn't work easily in a container.)  The version was current master at the time of writing.
ARG SU_EXEC_VER=212b75144bbc06722fbd7661f651390dc47a43d1
RUN  set -ex; \
     curl -o /sbin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/${SU_EXEC_VER}/su-exec.c; \
     gcc -Wall /sbin/su-exec.c -o/sbin/su-exec; \
     chown root:root /sbin/su-exec; \
     chmod 0755 /sbin/su-exec; \
     rm /sbin/su-exec.c

ARG MOCKERY_VER=2.3.0
RUN git clone -b v2.3.0 https://github.com/vektra/mockery.git $GOPATH/src/github.com/vektra/mockery.git; \
    cd $GOPATH/src/github.com/vektra/mockery.git; \
    go get github.com/vektra/mockery/v2/.../; \
    cp $GOPATH/bin/mockery /usr/local/bin/mockery; \
    chmod +x /usr/local/bin/mockery



# Disable ssh host key checking
RUN echo 'Host *' >> /etc/ssh/ssh_config \
  && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config

# Disable cgo so that binaries we build will be fully static.
ENV CGO_ENABLED=0

# Recompile the standard library with cgo disabled.  This prevents the standard library from being
# marked stale, causing full rebuilds every time.
RUN go install -v std

# Install ginkgo CLI tool for running tests
RUN go get github.com/onsi/ginkgo/ginkgo

# Install linting tools.
RUN wget -O - -q https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.20.0
RUN golangci-lint --version

# Install license checking tool.
RUN go get github.com/pmezard/licenses

# Install tool to merge coverage reports.
RUN go get github.com/wadey/gocovmerge

# Install CLI tool for working with yaml files
RUN GO111MODULE=on go get github.com/mikefarah/yq/v3

# Delete all the Go sources that were downloaded, we only rely on the binaries
RUN rm -rf /go/src/*

# Install generation tools.
RUN  go get -u k8s.io/code-generator/cmd/openapi-gen
RUN  go get -u k8s.io/code-generator/cmd/deepcopy-gen

# Install necessary Kubernetes binaries used in tests.
RUN wget https://dl.k8s.io/v1.23.2/bin/linux/s390x/kube-apiserver -O /usr/local/bin/kube-apiserver && chmod +x /usr/local/bin/kube-apiserver && \
	wget https://dl.k8s.io/release/v1.23.2/bin/linux/s390x/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && \
	wget https://dl.k8s.io/v1.23.2/bin/linux/s390x/kube-controller-manager -O /usr/local/bin/kube-controller-manager && chmod +x /usr/local/bin/kube-controller-manager

# Ensure that everything under the GOPATH is writable by everyone
RUN chmod -R 777 $GOPATH

RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFEST_TOOL_VERSION}/manifest-tool-linux-s390x > manifest-tool && \
    chmod +x manifest-tool && \
    mv manifest-tool /usr/bin/

# crane is needed for our release targets to copy images from the dev registries to the release registries.
RUN wget https://github.com/google/go-containerregistry/releases/download/v0.7.0/go-containerregistry_Linux_s390x.tar.gz && \
    tar -xvf go-containerregistry_Linux_s390x.tar.gz && \
    chmod +x crane && \
    mv crane /usr/bin

# Add bpftool for Felix UT/FV.
COPY --from=bpftool /bpftool /usr/bin

RUN cp -rf /usr/lib/llvm-11/lib/clang/11.0.1 /usr/lib/llvm-11/lib/clang/11.1.0

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
